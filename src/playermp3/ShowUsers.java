/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playermp3;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

/**
 *
 * @author Umer
 */
public class ShowUsers extends javax.swing.JFrame {
    private static int rowno;
    private static int colno;
    
  private static final String Namepatern = "[A-Za-z]{3,15}$";
    private static final String Passwordpatern = "^(?=(.*[A]).{1})(?=(.*[0-9]).{3})(?=(.*[@#$%^&+]){1})(?=(.*[a-z]){6})(?=(.*[=]){1})(?=\\S+$).{12,}$";

    /**
     * Creates new form ShowUsers
     */
    public ShowUsers() {
        rowno=-1;
        initComponents();
        adddata();
       
                     
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jToolBar1 = new javax.swing.JToolBar();
        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable8 = new javax.swing.JTable();
        mesage = new javax.swing.JLabel();
        Edit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("Users Accounts");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 51, 204));
        jButton1.setText("DeleteSelectedRow");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jToolBar1.setRollover(true);

        jTable8.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Password", "Trial Days Left"
            }
        ));
        jScrollPane3.setViewportView(jTable8);

        jScrollPane2.setViewportView(jScrollPane3);

        mesage.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        mesage.setForeground(new java.awt.Color(255, 0, 0));
        mesage.setToolTipText("");

        Edit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Edit.setForeground(new java.awt.Color(0, 0, 204));
        Edit.setText("Edit User Password");
        Edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(51, 0, 255));
        jLabel2.setText("Enter New Password");

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 204));
        jButton2.setText("Submit User Password");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(103, 103, 103)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(mesage, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(Edit, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(307, 307, 307))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(144, 144, 144)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(63, 63, 63)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(99, 99, 99)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(26, 26, 26)
                .addComponent(mesage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Edit, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE))
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    System.out.println ( jTable8.getSelectedRow() );
            mesage.setText("");
    int val=jTable8.getSelectedRow() ;
int row=jTable8.getSelectedRow();
int col=jTable8.getSelectedColumn();

        jTable8.getRowCount();
                   DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
 String value=(String) dtm.getValueAt(row, col);
 System.out.println(value);
int size = dtm.getRowCount();
for (int i=0;i<size;i++)
  dtm.removeRow(0);

                       try{ 
               String filepath = "user.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


		// Get the staff element by tag name directly
                int index=0;
                while(true){
		Node  staff = doc.getElementsByTagName("USER").item(index);

		// update staff attribute
		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                for (int i = 0; i < list.getLength(); i++) {
                    System.out.println(list.item(i));
                }

		 System.out.println(list.getLength());
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(0);
// System.out.println(node.getTextContent()+" yess ");
 
                      
                       if (node.getTextContent().equals(value))
                       {
		   if ("PASSWORD".equals(node.getNodeName())) {
			node.setTextContent("?");
		   }
                     node = list.item(1);
 //System.out.println(node.getNodeName());
 
                     if ("DATE".equals(node.getNodeName())) {
			node.setTextContent("?");
		   }
                     break;
                       }
                       
           index++;}     
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);

		System.out.println("Done");

                       }
               catch (ParserConfigurationException pce) {
		pce.printStackTrace();
	   } catch (TransformerException tfe) {
		tfe.printStackTrace();
	   } catch (IOException ioe) {
		ioe.printStackTrace();
	   } catch (SAXException sae) {
		sae.printStackTrace();
	   }


adddata();
 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void EditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditActionPerformed
        
        jLabel2.setVisible(true);
        jTextField1.setVisible(true);
        rowno=jTable8.getSelectedRow() ;
        colno=jTable8.getSelectedColumn();
    }//GEN-LAST:event_EditActionPerformed
public String getname()
{
    System.out.println ( jTable8.getSelectedRow() );
            mesage.setText("");
    int val=rowno;
    System.out.println("val "+ val);
       String file = "generaluser.txt";
if (val>=0){
            try {
            
                RandomAccessFile fileStore = new RandomAccessFile(file, "rw");
                String str="";
                int i=0;
                    if (i<val){
                while ((str=fileStore.readLine())!=null)
                {
                    System.out.println(" Show "+str);
                    i++;
                    if (i==(val))
                        break;
                }
                }
     
                String s =fileStore.readLine();
                String string[]=s.split(" ");
                     fileStore.close();
   
 try{               
File inputFile = new File("generaluser.txt");
File tempFile = new File("newfile.txt");

tempFile.createNewFile(); 
BufferedReader reader = new BufferedReader(new FileReader(inputFile));
BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

String lineToRemove = s;
String currentLine;

while((currentLine = reader.readLine()) != null) {
   // System.out.println("ohhh ");
    // trim newline when comparing with lineToRemove
    
    String trimmedLine = currentLine.trim();
     System.out.println("line "+trimmedLine+" "+trimmedLine.length());
     if(trimmedLine.length()>0){
    if(trimmedLine.equals(lineToRemove)) continue;
    writer.write(currentLine + System.getProperty("line.separator"));
     }
     }
writer.close(); 
reader.close(); 
inputFile.getAbsoluteFile().delete();
inputFile.delete();
File newfile = new File(inputFile.getAbsolutePath());
newfile.delete();
//inputFile.deleteOnExit();
if (inputFile.exists()){
    		if(inputFile.delete()){
    			System.out.println(inputFile.getName() + " is deleted!");
    		}else{
    			System.out.println("Delete operation is failed.");
    		}
}
else
{
    System.out.println("File Doesnot Exists");
}
boolean successful = tempFile.renameTo(inputFile);
System.out.println("file "+successful);
  int size= 0;
        size = jTable8.getRowCount();
                   DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
 

 }
 catch(Exception e)
 {
     System.out.println(e);
 }

                
                return string[0];
            }
            catch(Exception e)
            {
                return "";
            }
 
}
else
{
    mesage.setText("Select Any Row");
    return "";
}
}
    
    public void submit()
{
   
            boolean check=false;
        boolean check1=false;

        mesage.setVisible(true);
      //  mesage1.setVisible(true);
        mesage.setText("");
    //    mesage1.setText("");

        String name=  getname();
     //   char [] array = name.toCharArray();
     System.out.println(name);
        if (name.matches(Namepatern))
        {
            check=true;
        }
        else
        {
            mesage.setText("Name Length Should Be 3 or more than 3");
        }
        String password= jTextField1.getText();

        if (password.matches(Passwordpatern))
        {
            check1=true;
        }
        else
        {
            mesage.setText("Passwords Must be 12 digits Long Starting with A- then + 3 numbers a +special character $ +6 letters + Always ends with = sign");

        }
        if (check==true &&  check1==true){
            String file = "generaluser.txt";

            try {
                RandomAccessFile fileStore = new RandomAccessFile(file, "rw");
                String str="";
                str = fileStore.readLine();
                System.out.println( fileStore.getFilePointer() );
               
                String sCurrentLine="";

			while ((sCurrentLine = fileStore.readLine()) != null) {
                        System.out.println(sCurrentLine);
                	}
                         int val=(int) fileStore.getFilePointer() ;
                         
        
                fileStore.seek(val);
             
             //         fileStore.write('\r');
              // fileStore.write('\n');
              // fileStore.write("new Line".getBytes());
               
                                 Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(today);
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 45);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

                fileStore.writeBytes(name+" "+password+" "+reportDate);
               
             for (int i=0;i<7;i++) 
             {
                 String string = fileStore.readLine();
                 System.out.println("Filee "+string+ string.length());
             }
             
            }
            catch (Exception e)
            {
                System.out.println(e);
                mesage.setText(e.toString());
            }

        }

}
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
            
        mesage.setText("");
              DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
                               
 String value=(String) dtm.getValueAt(rowno, colno);
String nametext=jTextField1.getText();
if (nametext.matches(Passwordpatern))
{
            if (rowno>=0)
            {
                             
            
 System.out.println("value "+value);
 


                       try{ 
                            Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(today);
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 45);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

               String filepath = "user.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(true){
		Node  staff = doc.getElementsByTagName("USER").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                //for (int i = 0; i < list.getLength(); i++) {
                //    System.out.println(list.item(i));
               // }

		// System.out.println(list.getLength());
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(0);
 //System.out.println(node.getTextContent()+" alhamdullilah ");
 
                      
                       if (node.getTextContent().equals(value))
                       {
                           System.out.println(jTextField1.getText());
                           
		   if ("PASSWORD".equals(node.getNodeName())) {
			node.setTextContent(jTextField1.getText());
		   }
                     node = list.item(1);
 System.out.println(node.getNodeName());
 
                     if ("DATE".equals(node.getNodeName())) {
			node.setTextContent(reportDate);
		   }
                     break;
                       }
                       
           index++;}     
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
            }
                       catch(Exception e)
                       {
                           
                       }
            }
}
else
{
    mesage.setText(" Password Start with A then 3 letters + sepecidal charater + 6 letters + = ");
}
      int size=dtm.getRowCount();
              for (int i=0;i<size;i++)
                  dtm.removeRow(0);
              jTextField1.setText("");
              adddata();
                 

        
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ShowUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ShowUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ShowUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShowUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ShowUsers().setVisible(true);
            }
        });
    }
public void removerow()
{
    System.out.println ( jTable8.getSelectedRow() );
            mesage.setText("");
    int val=jTable8.getSelectedRow() ;
       String file = "generaluser.txt";
if (val>=0){
            try {
            
                RandomAccessFile fileStore = new RandomAccessFile(file, "rw");
                String str="";
                int i=0;
                    if (i<val){
                while ((str=fileStore.readLine())!=null)
                {
                    //System.out.println(" Show "+str);
                    i++;
                    if (i==(val))
                        break;
                }
                }
     
                String s =fileStore.readLine();
                
System.out.println(s);
     fileStore.close();
   
 try{               
File inputFile = new File("generaluser.txt");
File tempFile = new File("newfile.txt");

tempFile.createNewFile(); 
BufferedReader reader = new BufferedReader(new FileReader(inputFile));
BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile));

String lineToRemove = s;
String currentLine;

while((currentLine = reader.readLine()) != null) {
   // System.out.println("ohhh ");
    // trim newline when comparing with lineToRemove
    String trimmedLine = currentLine.trim();
    if(trimmedLine.equals(lineToRemove)) continue;
    writer.write(currentLine + System.getProperty("line.separator"));
}
writer.close(); 
reader.close(); 
inputFile.delete();

boolean successful = tempFile.renameTo(inputFile);
System.out.println(successful);
  int size= 0;
        size = jTable8.getRowCount();
                   DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
 

        dtm.removeRow(val);
     //  adddata();
 }
 catch(Exception e)
 {
     System.out.println(e);
 }
               // inputFile.delete();
                //fileStore.write(array, first, second);
        
      //   for(  i = 0; i < size; i-- ) 
    //    dtm.removeRow(i);
            
          
            }  
            
            catch(Exception e)
            {
                
            }
}
else
{
            DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
         
           if (dtm.getRowCount()==0)
                        {
                           mesage.setText("No more Data in DataBase");
                        }
   else              
    mesage.setText(" Select Any Row To Delete ");
}
  
}
    public void adddata()
    {
                jLabel2.setVisible(false);
                jTextField1.setVisible(false);
                     //jTable8.setVisible(false);
                                          jLabel1.setText("");

             mesage.setText("");
            DefaultTableModel dtm = (DefaultTableModel) jTable8.getModel();
         
                
try{
            File fXmlFile = new File("user.xml");
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);

	doc.getDocumentElement().normalize();

//	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

	NodeList nList = doc.getElementsByTagName("USER");

	System.out.println("----------------------------");

for (int i=0;i<100;i++){
		Node nNode = nList.item(i);
//		System.out.println("\nCurrent Element :" + nNode.getNodeName());

		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;
//System.out.println(eElement.getElementsByTagName("DATE").item(1).getTextContent());

			//System.out.println("NAME : " + eElement.getElementsByTagName("NAME").item(0).getTextContent());
			//System.out.println("PASSWORD : " + eElement.getElementsByTagName("PASSWORD").item(0).getTextContent());
			//System.out.println("Salary : " + eElement.getElementsByTagName("salary").item(0).getTextContent());
//String id = eElement.getElementsByTagName("ID").item(0).getTextContent();
                       // System.out.println("yes");
                        String p =  eElement.getElementsByTagName("PASSWORD").item(0).getTextContent();
                        String d =  eElement.getElementsByTagName("DATE").item(0).getTextContent();
                      //  System.out.println("ohhhhh "+p+" "+d);
                   
                        if( !(p.equals("?")&& d.equals("?"))){
                                 Date today = Calendar.getInstance().getTime(); 
                   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = d;
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

    Vector v = new Vector();
                                v.add(p);
                                
  long diff = day.getTime() - today.getTime();
        long diffSeconds = diff / 1000 % 60;
        long diffMinutes = diff / (60 * 1000) % 60;
        long diffHours = diff / (60 * 60 * 1000);
        int diffInDays = (int) ((day.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));

        if (diffInDays > 1) {
            System.err.println("Difference in number of days (2) : " + diffInDays);
                       v.add("No of Days Left: "+ diffInDays);
                               
           
        } else if (diffHours > 24) {

            System.err.println(">24");
                        v.add("No of Hours Left:"+ diffInDays);
           
   //  mesage.setText("Welcome");
                        
        } else if ((diffHours == 24) && (diffMinutes >= 1)) {
            System.err.println("minutes");
                                      v.add("No of Minutes:"+ diffInDays);
                
        }
 
                              
                                dtm.addRow(v);
                        
                        }
                                 
                      
                }
}
 if (dtm.getRowCount()==0)
                        {
                           mesage.setText("No more Data in DataBase");
                        }
}
                catch(Exception e)
                {
                    
                }
    
             
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Edit;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable8;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel mesage;
    // End of variables declaration//GEN-END:variables
}
