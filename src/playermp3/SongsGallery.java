/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package playermp3;
import java.awt.Color;
import javax.swing.JPanel;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.FileReader;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.ResourceBundle;
import java.util.Vector;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.Button;
import javafx.stage.FileChooser;
import javafx.scene.control.ListView;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import javax.swing.ImageIcon;
import static playermp3.MediaPlayerSample.initFX;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JScrollPane;
/**
 *
 * @author Umer
 */
public class SongsGallery extends javax.swing.JFrame {
    private MediaPlayer player;
    public int rowsno;
    public int colsno;
        DefaultListModel dmimage=new DefaultListModel();
   
ArrayList<String> mp3Paths = new ArrayList<String>();
// MediaPlayerSample sample = new MediaPlayerSample();
      
    /**
     * Creates new form SongsGallery
     */
    public SongsGallery() {
        initComponents();
        createfile();
        checkdate();
        adddata();
      jButton4.setVisible(false);
        jButton2.setVisible(false);
jLabel3.setVisible(false);
Songname.setVisible(false);
Submit.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        mesage = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        scrollPane1 = new java.awt.ScrollPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        Songname = new javax.swing.JTextField();
        Submit = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 255));
        jLabel1.setText("LIST OF SONGS IN GALLERY");

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(51, 51, 255));
        jButton1.setText("Add New Song");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        mesage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        mesage.setForeground(new java.awt.Color(255, 0, 0));

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton2.setForeground(new java.awt.Color(51, 51, 255));
        jButton2.setText("Play All Panel Songs");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(51, 51, 255));
        jButton3.setText("Delete Song");
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 0, 0));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Songs", "No Of Times Song Played Today"
            }
        ));
        jTable1.setDragEnabled(true);
        jScrollPane2.setViewportView(jTable1);

        scrollPane1.add(jScrollPane2);

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(51, 51, 255));
        jButton4.setText("Play Selected Song");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 204));
        jButton5.setText("Edit Selected Song Name");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("New Song Name");

        Submit.setBackground(new java.awt.Color(51, 51, 51));
        Submit.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        Submit.setForeground(new java.awt.Color(51, 0, 204));
        Submit.setText("Submit ");
        Submit.setToolTipText("");
        Submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubmitActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(51, 51, 51));
        jButton6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 204));
        jButton6.setText("Change Selected Song PlayingTime To Zero");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(mesage, javax.swing.GroupLayout.PREFERRED_SIZE, 1490, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1279, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(814, 814, 814)
                        .addComponent(jButton2)
                        .addGap(79, 79, 79)
                        .addComponent(jButton4)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jButton6)
                .addGap(1833, 1833, 1833))
            .addGroup(layout.createSequentialGroup()
                .addGap(186, 186, 186)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(107, 107, 107)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Songname, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(133, 133, 133)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Songname, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(Submit, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mesage, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
public void addnewsong(String song,String newsong)
{
        try{
        String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                     Node node = list.item(2);
                     Element eElement = (Element) node;
            System.out.println(node.getTextContent());
                      if (node.getTextContent().equals(song))
                       {
                             node.setTextContent(newsong);
                             break;
		        }
                    
                   
                       
           index++; }     
              TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result); }
        catch (Exception e){
		
        }
                  
               
    
}
    public boolean checksongs(String songname)
    {
        try{
        String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                     Node node = list.item(2);
                     Element eElement = (Element) node;
                    
                      if (node.getTextContent().equals(songname))
                       {
                              return false;
		        }
                    
                   
                       
           index++; }     
              TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result); }
        catch (Exception e){
		
        }
                  
               
        return true;
    }
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
     
        String songname="";
        boolean songcheck=true;
        mesage.setText("");
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
 
JFileChooser fileChooser = new JFileChooser();
//FileReader textarea = null;
mesage.setText("");
     int returnVal = fileChooser.showOpenDialog(this);
     
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        
        File file = fileChooser.getSelectedFile();
        try {
            String path = file.getPath();
              if (path.endsWith(".mp3") || path.endsWith(".mp4")) 
              {
                        Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(today);
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(" file name "+reportDate);

               String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
// node = list.item(0);
 //System.out.println(node.getTextContent()+" alhamdullilah ");
                      if (node.getTextContent().equals("?"))
                       {
                            System.out.println("okk ");
                      //     System.out.println(jTextField1.getText());
                           
                      String myfilename="";
                      for (int i=path.length()-1;i>=0;i--)
                      {
                          char character = path.charAt(i);

                          if (character=='\\')
                          {
                              break;
                          }
                          else
                          {
                              myfilename=myfilename+path.charAt(i);
                          }
                      }
                    System.out.println("path ");
		
                      String myfile="";
                      for (int i=myfilename.length()-1;i>=0;i--)
                      {
                          myfile=myfile+myfilename.charAt(i);
                      }
                      
                      System.out.println((path.length()-myfilename.length()));
                      if (checksongs(myfile)==true){
                    String pathfile="";
                    pathfile=path.substring(0, (path.length()-myfilename.length()));
                    System.out.println("path "+pathfile);
		   if ("PATH".equals(node.getNodeName())) {
                       node.setTextContent(pathfile);
                        System.out.println(node.getNodeName());
                         node = list.item(1);
                         System.out.println(node.getNodeName());
                          
                         if ("NAME".equals(node.getNodeName())) {
			node.setTextContent(myfile);
        
		   }
                         node = list.item(2);
                              if ("USERNAME".equals(node.getNodeName())) {
			node.setTextContent(myfile);
                        songname=myfile;
        
		   } node = list.item(3);
                         if ("DATE".equals(node.getNodeName())) {
			node.setTextContent(reportDate);
        
		   }
                     node = list.item(4);
 System.out.println(node.getNodeName());
 
                     if ("TIMES".equals(node.getNodeName())) {
			node.setTextContent("0");
		   }
                    break;
                       }
                       
           }
                      else
                      {
                          mesage.setText("Cannot Add...Song With Same Name Already Exists");
                          songcheck=false;
                          break;
                      }
                       }
           index++;     }
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
                  
                  
              }
        }
       
    
        catch(Exception e)
        {
            
        }

    }
 if (songcheck==true)
 {    int si =dtm.getRowCount();
 for (int i=0;i<si;i++)
     dtm.removeRow(0);
adddata();
 dmimage.clear();
         
      //  dmimage.addElement(new ImageNText(songname, new ImageIcon(getClass().getClassLoader().getResource("playermp3/songpic.jpg"))));
         //       jList1.setCellRenderer(new Renderer());
       // jList1.setModel(dmimage);
 }
 
    }//GEN-LAST:event_jButton1ActionPerformed

      
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    mesage.setText("");
        
         DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
         int row= jTable1.getSelectedRow();
         int col= jTable1.getSelectedColumn();
               row=0;
               col=0;
      int size=dtm.getRowCount();
        if(size>0){ 
            ArrayList<String> listofsongs = new ArrayList<String>();
            ArrayList<String> listofsongsname = new ArrayList<String>();
            ArrayList<String> songspath = new ArrayList<String>();
  
      //listofsongs.add(file);
    for (int i=0;i<size;i++){  
         Object str=dtm.getValueAt(row+i, col);
        
         System.out.println(str);
         String s = str.toString();
         String songname="";
         //String c= "";
          String file="";
          songspath.add(s);
         for (int j=s.length()-1;j>=0;j--)
         {
        if (s.charAt(j)=='\\')
        
        {
            file=file+s.substring(0, (j));
            break;
        }
        else
        { 
           
            songname=songname+ s.charAt(j);
        
        }
         }

          listofsongs.add(file);
         String mysong="";
          for (int k=songname.length()-1;k>=0;k--)
         {
             mysong=mysong+songname.charAt(k);
         }
          listofsongsname.add((mysong));
          System.out.println("Song name "+mysong);
      }
         
      
         MediaPlayerSample sample = new MediaPlayerSample();
         sample.initAndShowGUI(listofsongs,listofsongsname);
      
         }
         else
         {
             mesage.setText(" *** Songs Gallery Is Empty Or All the Songs Are Played 3 Times in a Day So wait for 4 Hours ***");
         }
      
    }//GEN-LAST:event_jButton2ActionPerformed
 public static void infoBox(String infoMessage, String titleBar)
    {
        JOptionPane.showMessageDialog(null, infoMessage, "InfoBox: " + titleBar, JOptionPane.INFORMATION_MESSAGE);
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        mesage.setText("");
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
         int row= jTable1.getSelectedRow();
         int col= jTable1.getSelectedColumn();
   if (row>=0){      
         Object str=dtm.getValueAt(row, col);
         System.out.println(str);
  
        dtm.removeRow(row);
        
deltesong(str.toString());
    }
    else
    {
        mesage.setText(" Select Any Row ");
    }
    }//GEN-LAST:event_jButton3ActionPerformed

 
    public void deltesong(String songname)
    {
        boolean songcheck=true;
        try{
            String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                     Node node = list.item(2);
                     Element eElement = (Element) node;
                    
                      if (node.getTextContent().equals(songname))
                       {
                    node = list.item(0);
                    if ("PATH".equals(node.getNodeName())) {
                       node.setTextContent("?");
                        System.out.println(node.getNodeName());
                         node = list.item(1);
                         System.out.println(node.getNodeName());
                          
                         if ("NAME".equals(node.getNodeName())) {
			node.setTextContent("?");
        
		   }
                         node = list.item(2);
                              if ("USERNAME".equals(node.getNodeName())) {
			node.setTextContent("?");
        
		   } node = list.item(3);
                         if ("DATE".equals(node.getNodeName())) {
			node.setTextContent("?");
        
		   }
                     node = list.item(4);
 System.out.println(node.getNodeName());
 
                     if ("TIMES".equals(node.getNodeName())) {
			node.setTextContent("0");
		   }
                    break;
                       }
                       
           }
                      else
                      {
                         // mesage.setText("Cannot Add...Song With Same Name Already Exists");
                       //   songcheck=false;
                       //   break;
                      }
           index++;            }
        	TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
         
        
        }
        catch(Exception e)
        {
        
        }
	
                  
                  
              }
        
       
    public String returnfilepath(String filename)
    {
        try{
            File fXmlFile = new File("songs.xml");
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);

	doc.getDocumentElement().normalize();

//	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

	NodeList nList = doc.getElementsByTagName("SONGS");

	System.out.println("----------------------------");

for (int i=0;i<100;i++){
		Node nNode = nList.item(i);
//		System.out.println("\nCurrent Element :" + nNode.getNodeName());

		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;
                        String path =  eElement.getElementsByTagName("PATH").item(0).getTextContent();
                      
                        String n =  eElement.getElementsByTagName("USERNAME").item(0).getTextContent();
                       
                        String filnme =  eElement.getElementsByTagName("NAME").item(0).getTextContent();
                       
                        String d =  eElement.getElementsByTagName("DATE").item(0).getTextContent();
                        String p =  eElement.getElementsByTagName("TIMES").item(0).getTextContent();
                        System.out.println(path + " "+n +" "+d+" "+p);
                      
             if (n.equals(filename))
             {
                 return path+"\\"+filnme;
             }
                      
                }
}

                
                    
                }
catch(Exception e)
{
    
}
        
        return "";
    }
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
 mesage.setText("");
        
         DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
         int row= jTable1.getSelectedRow();
         int col= jTable1.getSelectedColumn();
                   
      int size=dtm.getRowCount();
        if(size>0 && row!=-1 && col!=-1){ 
   
         Object str=dtm.getValueAt(row, 0);
        
         System.out.println(str);
         String s = str.toString();
         s=returnfilepath(str.toString());
         System.out.println("path "+s);
         String songname="";
         String file="";
         for (int j=s.length()-1;j>=0;j--)
         {
        if (s.charAt(j)=='\\')
        
        {
            file=file+s.substring(0, (j));
            break;
        }
        else
        { 
           
            songname=songname+ s.charAt(j);
        
        }
         }

         String mysong="";
          for (int k=songname.length()-1;k>=0;k--)
         {
             mysong=mysong+songname.charAt(k);
         }
         
          System.out.println("Song name "+mysong);
        SingleSongPlayer sample = new SingleSongPlayer();
         sample.initAndShowGUI(file,mysong);
         
      incrementsinglesong(mysong);
  //       dispose();
  
        }
    
         else
         {
             mesage.setText(" *** Songs Gallery Is Empty Or All the Songs Are Played 3 Times in a Day So wait for 4 Hours ***");
         }
         
      
           
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
         DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
          rowsno= jTable1.getSelectedRow();
          colsno= jTable1.getSelectedColumn();
        System.out.println(rowsno +" "+colsno);
      int size=dtm.getRowCount();
      if (rowsno!=-1 && colsno!=-1)
      {
          jLabel3.setVisible(true);
          Songname.setVisible(true);
          Submit.setVisible(true);
      }
      else
          mesage.setText("Please Select Any Song From Table");
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void SubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubmitActionPerformed
      mesage.setText("");
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
         String song=dtm.getValueAt(rowsno, 0).toString();
       //  System.out.println("Song name "+song);
String newsong=Songname.getText();
if (!Songname.equals("")){
if (checksongs(newsong)==true)  
{
    
    addnewsong(song,newsong);
    jLabel3.setVisible(false);
    Songname.setVisible(false);
    Submit.setVisible(false);
   
     int si =dtm.getRowCount();
 for (int i=0;i<si;i++)
     dtm.removeRow(0);
adddata();
}
else
{
    
    mesage.setText("**Song Having Same Name Already Exists Enter New Song Name**");
}
}
else
{
    mesage.setText("**Please Enter New Song Name in Text Field**");
}
    }//GEN-LAST:event_SubmitActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        mesage.setText("");
                 DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
          rowsno= jTable1.getSelectedRow();
          colsno= jTable1.getSelectedColumn();
        System.out.println(rowsno +" "+colsno);
      int size=dtm.getRowCount();
      if (rowsno!=-1 && colsno!=-1 && size>0)
      {
      String songname= dtm.getValueAt(rowsno, colsno).toString();
      removesongname(songname);
      for (int i=0;i<size;i++)
      {
          dtm.removeRow(0);
      }
      adddata();
      }
      else
          
      {
          mesage.setText("please select any song from table");
      }
      
      

    }//GEN-LAST:event_jButton6ActionPerformed
public void removesongname(String songname)
{
            try{
        String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                     Node node = list.item(2);
                     Element eElement = (Element) node;
            System.out.println(node.getTextContent());
                      if (node.getTextContent().equals(songname))
                       {
node = list.item(4);
node.setTextContent("0");
                             break;
		        }
                    
                   
                       
           index++; }     
              TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result); }
        catch (Exception e){
		
        }
                  
               

}
    
    public void createfile()
    {
        File file = new File("songs.xml");
        if (!file.exists())
        {      
                try {

		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();

		// root elements
		Document doc = docBuilder.newDocument();
		Element rootElement = doc.createElement("MPLAYER");
		doc.appendChild(rootElement);

		// staff elements

for (int i=0;i<100;i++){
    		Element staff = doc.createElement("SONGS");
		rootElement.appendChild(staff);
		// set attribute to staff element
		Attr attr = doc.createAttribute("ID");
		attr.setValue(Integer.toString(i));
		staff.setAttributeNode(attr);

		// shorten way
		// staff.setAttribute("id", "1");

		// firstname elements
		Element PATH = doc.createElement("PATH");
		PATH.appendChild(doc.createTextNode("?"));
		staff.appendChild(PATH);
                
                Element name = doc.createElement("NAME");
		name.appendChild(doc.createTextNode("?"));
		staff.appendChild(name);
                
                Element USERNAME= doc.createElement("USERNAME");
		USERNAME.appendChild(doc.createTextNode("?"));
		staff.appendChild(USERNAME);
                
		// nickname elements
		Element Date = doc.createElement("DATE");
		Date.appendChild(doc.createTextNode("?"));
		staff.appendChild(Date);
                
		Element TIMES = doc.createElement("TIMES");
		TIMES.appendChild(doc.createTextNode("?"));
		staff.appendChild(TIMES);
}
		// salary elements
		
		// write the content into xml file
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File("songs.xml"));

		// Output to console for testing
		// StreamResult result = new StreamResult(System.out);

		transformer.transform(source, result);

	//	System.out.println("File saved!");

	  } catch (ParserConfigurationException pce) {
		pce.printStackTrace();
	  } catch (TransformerException tfe) {
		tfe.printStackTrace();
	  }
    
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SongsGallery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SongsGallery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SongsGallery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SongsGallery.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SongsGallery().setVisible(true);
//                    MediaPlayerSample sample = new MediaPlayerSample();
            }
        });
    }
public  void checkdate()
    {
                            try{ 

  
               String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();

                int index=0;
     
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
              
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(0);
 String name = node.getTextContent();
// System.out.println(node.getTextContent());
                       if (!name.equals("?")){
  //                            System.out.println("helo");
                            node = list.item(3);
             
                            if ("DATE".equals(node.getNodeName())) {
				//node.setTextContent(reportDate);
                try{              
                    
                    Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = node.getTextContent().toString();
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(today);
System.out.println(reportDate);
                
long diff = day.getTime() - today.getTime();
        int diffInDays = (int) ((day.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
    System.err.println("Difference in number of days (2) : " + diffInDays);
        
        if (diffInDays <0) {
            System.err.println("Difference in number of days (2) : " + diffInDays);
            
        
        node.setTextContent(reportDate);
		   
                     node = list.item(4);
// System.out.println(node.getNodeName());
 
                     if ("TIMES".equals(node.getNodeName())) {
			node.setTextContent("0");
		   }
        }
                    // break;
                }    
                
                catch(Exception e)
                        {
                        }
                            }
                       }
           index++;     
      }
          
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
                            }            
                       catch(Exception e)
                       {
                           
                       }
    }

    
    void incrementsong(ArrayList<String> songname)
    {
                DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
 int si = dtm.getRowCount();
 for (int i=0;i<si;i++)
     dtm.removeRow(0);
                            try{ 
                            Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(today);
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

               String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();

for (int i=0;i<songname.size();i++){
                int index=0;
     
                while(true){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                //for (int i = 0; i < list.getLength(); i++) {
                //    System.out.println(list.item(i));
               // }

		// System.out.println(list.getLength());
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(0);
// System.out.println(node.getTextContent()+" alhamdullilah ");
 String name = node.getTextContent();
 //String splitname[]=name.split("\\");
   //                   int s =splitname.length;
                       if (name.equals(songname.get(i)))
                       {
                      //     System.out.println(jTextField1.getText());
//                              System.out.println("helo");
                            node = list.item(1);
		   if ("DATE".equals(node.getNodeName())) {
				node.setTextContent(reportDate);
		   }
                     node = list.item(2);
 System.out.println(node.getNodeName());
 String times= node.getTextContent();
 int mytimes=Integer.parseInt(times);
 mytimes++;
 String v = Integer.toString(mytimes);
                     if ("TIMES".equals(node.getNodeName())) {
			node.setTextContent(v);
		   }
                     break;
                       }
                       
           index++;}     
}
		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
            }
                       catch(Exception e)
                       {
                           
                       }
                            adddata();
   
    }
    void incrementsinglesong(String song)
    {
             DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
 int si = dtm.getRowCount();
 for (int i=0;i<si;i++)
     dtm.removeRow(0);
                            try{ 
                            Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(today);
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

               String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
     
                while(true){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
               
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(2);
 //System.out.println(node.getTextContent()+" alhamdullilah ");
 String name = node.getTextContent();
                       if (name.equals(song))
                       {
                   //           System.out.println("helo");
                            node = list.item(3);
		   if ("DATE".equals(node.getNodeName())) {
				node.setTextContent(reportDate);
		   }
                     node = list.item(4);
 System.out.println(node.getNodeName());
 String times= node.getTextContent();
 int mytimes=Integer.parseInt(times);
 mytimes++;
 String v = Integer.toString(mytimes);
                     if ("TIMES".equals(node.getNodeName())) {
			node.setTextContent(v);
		   }
                     break;
                       }
                       
           index++;}     

		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
            }
                       catch(Exception e)
                       {
                           
                       }
                            adddata();
  
    }
    
    void setdatesongs()
    {
                 DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
 int si = dtm.getRowCount();
 for (int i=0;i<si;i++)
     dtm.removeRow(0);
                            try{ 
               String filepath = "songs.xml";
		DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
		Document doc = docBuilder.parse(filepath);

		Node company = doc.getFirstChild();


                int index=0;
     
                while(index<100){
		Node  staff = doc.getElementsByTagName("SONGS").item(index);

		NamedNodeMap attr = staff.getAttributes();
		Node nodeAttr = attr.getNamedItem("ID");
		NodeList list = staff.getChildNodes();
                
                //for (int i = 0; i < list.getLength(); i++) {
                //    System.out.println(list.item(i));
               // }

		// System.out.println(list.getLength());
                     Node node = list.item(0);
                     Element eElement = (Element) node;
                    
 node = list.item(0);
 //System.out.println(node.getTextContent()+" alhamdullilah ");
 String name = node.getTextContent();
 //String splitname[]=name.split("\\");
   //                   int s =splitname.length;
                       if (!name.equals("?"))
                       {
                      //     System.out.println(jTextField1.getText());
                              System.out.println("helo");
                            node = list.item(1);
		               Date today = Calendar.getInstance().getTime();   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = sdf.format(node.getTextContent());
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

             
                            if ("DATE".equals(node.getNodeName())) {
				node.setTextContent(reportDate);
		   }
                     node = list.item(2);
 System.out.println(node.getNodeName());
 String times= node.getTextContent();
 int mytimes=Integer.parseInt(times);
 mytimes++;
 String v = Integer.toString(mytimes);
             
		   }
             //        break;
                       
                       
           index++;}     

		TransformerFactory transformerFactory = TransformerFactory.newInstance();
		Transformer transformer = transformerFactory.newTransformer();
		DOMSource source = new DOMSource(doc);
		StreamResult result = new StreamResult(new File(filepath));
		transformer.transform(source, result);
   
            }
                       catch(Exception e)
                       {
                           
                       }
             
    
    }
    void getMp3s(File f) {
    File[] files;
    if (f.isDirectory() && (files = f.listFiles()) != null) {
        for (File file : files) {
            getMp3s(file);
        }
    }
    else {
        String path = f.getPath();
        if (path.endsWith(".mp3")) {
            mp3Paths.add(f.getName());
        }
    }
}
    public void adddata ()
    {
        mesage.setText("");
         DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
 
        mesage.setText("");
           
try{
            File fXmlFile = new File("songs.xml");
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document doc = dBuilder.parse(fXmlFile);

	doc.getDocumentElement().normalize();

//	System.out.println("Root element :" + doc.getDocumentElement().getNodeName());

	NodeList nList = doc.getElementsByTagName("SONGS");

	System.out.println("----------------------------");

for (int i=0;i<100;i++){
		Node nNode = nList.item(i);
		System.out.println("\nCurrent Element :" + nNode.getNodeName()+" "+nNode.getNodeType()+" "+  Node.ELEMENT_NODE+" "+i);

		if (nNode.getNodeType() == Node.ELEMENT_NODE) {

			Element eElement = (Element) nNode;

                        String n =  eElement.getElementsByTagName("USERNAME").item(0).getTextContent();
                       
                        String d =  eElement.getElementsByTagName("DATE").item(0).getTextContent();
                        String p =  eElement.getElementsByTagName("TIMES").item(0).getTextContent();
                        
                      
  System.out.println(n+" "+p+" "+d);
                   
                        if( !(n.equals("?")) && !(p.equals("?"))&& !(d.equals("?"))){ //&& Integer.parseInt(p)<3) {
                           System.out.println("hoo");
                            Date today = Calendar.getInstance().getTime(); 
                   
SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
 String dt = d;
Calendar c = Calendar.getInstance();
c.setTime(sdf.parse(dt));
c.add(Calendar.DATE, 0);  // number of days to add
dt = sdf.format(c.getTime());  
sdf.setTimeZone(c.getTimeZone());
sdf.setCalendar(c);
Date day = c.getTime();   
String reportDate = sdf.format(day);
System.out.println(reportDate);

    Vector v = new Vector();
               //                 v.add(p);
                                
  long diff = day.getTime() - today.getTime();
        long diffSeconds = diff / 1000 % 60;
        long diffMinutes = diff / (60 * 1000) % 60;
        long diffHours = diff / (60 * 60 * 1000);
        int diffInDays = (int) ((day.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
            System.err.println("Difference in number of days (2) : " + diffInDays);

        if (diffInDays > 1 || diffInDays==0) {
            System.err.println("Difference in number of days  : " + diffInDays);
                 
           
                v.add(n);
            v.add("Played "+p+" Times Today");
             
                                dtm.addRow(v);
                              
           
        } else if (diffHours > 24) {

            System.err.println(">24");
 String  name [] = n.split("\\");
 int s= name.length-1;
            v.add(name[s]);
            v.add("Played "+p+" Times Today");
          //  v.add("No of Hours Left:"+ diffInDays);
           
   //  mesage.setText("Welcome");
                         
                               dtm.addRow(v);
        } else if ((diffHours == 24) && (diffMinutes >= 1)) {
            System.err.println("minutes");
              //v.add("No of Minutes:"+ diffInDays);
                v.add(n);
            v.add("Played "+p+" Times Today");
             
                                dtm.addRow(v);
        }
        else if (diffInDays==0)
        {
            System.out.println(" difference "+diffInDays);
                v.add(n);
            v.add("Played "+p+" Times Today");
            dtm.addRow(v);
        }
 
                             
                        
                        }
                                 
                      
                }
}
int size =dmimage.size();
System.out.println(" Size "+size);

}
                catch(Exception e)
                {
                    
                }
    
         
   
    }    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Songname;
    private javax.swing.JButton Submit;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel mesage;
    private java.awt.ScrollPane scrollPane1;
    // End of variables declaration//GEN-END:variables
}
